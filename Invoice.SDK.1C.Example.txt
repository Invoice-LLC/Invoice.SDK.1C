&НаКлиенте
Перем Payment;
&НаКлиенте
Перем Terminal;

////////////////////////////////////////

Функция СоздатьСтрокуBase64(Строка) Экспорт
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	ЗаписьТекста = Новый ЗаписьТекста(ВременныйФайл, "CESU-8");
	ЗаписьТекста.Записать(Строка);
	ЗаписьТекста.Закрыть();

	ДД_Файла = Новый ДвоичныеДанные(ВременныйФайл);
	СтрокаBase64 = Base64Строка(ДД_Файла);
	УдалитьФайлы(ВременныйФайл);
	Возврат СтрокаBase64;
КонецФункции // СоздатьСтрокуBase64()

Функция ПерекодироватьСтроку(СтрокаКодирования, Кодировка = "UTF-8") экспорт
    ТекстДляПерекодирования = Новый ТекстовыйДокумент;        
    ТекстДляПерекодирования.УстановитьТипФайла(Кодировка);
    ТекстДляПерекодирования.УстановитьТекст(СтрокаКодирования);
    Возврат ТекстДляПерекодирования.ПолучитьТекст();
КонецФункции //ПерекодироватьСтроку()

Функция RestSend(метод, данные) 
	//  Сериализуем в Json
	зписьJSON = Новый ЗаписьJSON; 
	параметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);	
	зписьJSON.УстановитьСтроку(параметрыJSON);
	ЗаписатьJSON(зписьJSON, данные);
	json = зписьJSON.Закрыть();
	json = ПерекодироватьСтроку(json);
	Попытка
        WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
        WinHttp.Option(2, "utf-8");
        WinHttp.Open("POST", "https://api.invoice.su/api/v2/" + метод,0);
        WinHttp.SetRequestHeader("Content-Type", "application/json; charset=utf-8");
        WinHttp.SetRequestHeader("Content-Length", СтрДлина(json));
        WinHttp.setRequestHeader("Authorization", "Basic " + СоздатьСтрокуBase64("invoice@invoice" + ":" + "5887a65cabb849463372ee71ce219824"));
        WinHttp.Send(json);
        ответ = ПерекодироватьСтроку(WinHttp.ResponseText(), "windows-1251");
		
		чтениеJSON = Новый ЧтениеJSON;
		чтениеJSON.УстановитьСтроку(ответ);
		результат = ПрочитатьJSON(чтениеJSON,Истина);
		Возврат результат;
    Исключение
        Сообщить(ОписаниеОшибки());
    КонецПопытки;
КонецФункции // RestSend()

Функция CreatePayment(obj)
	Возврат RestSend("CreatePayment", obj)
КонецФункции

Функция GetPayment(obj)
	Возврат RestSend("GetPayment", obj)
КонецФункции

Функция GetPaymentByOrder(obj)
	Возврат RestSend("GetPaymentByOrder", obj)
КонецФункции

Функция ClosePayment(obj)
	Возврат RestSend("ClosePayment", obj)
КонецФункции

Функция CreateRefund(obj)
	Возврат RestSend("CreateRefund", obj)
КонецФункции

Функция GetRefund(obj)
	Возврат RestSend("GetRefund", obj)
КонецФункции

Функция CreateTerminal(obj)
	Возврат RestSend("CreateTerminal", obj)
КонецФункции

Функция GetTerminal(obj)
	Возврат RestSend("GetTerminal", obj)
КонецФункции

//////////////////////////////////////////


&НаКлиенте
Процедура ПровекаПлатежа() Экспорт
	платежИнфо = Новый Структура;
    платежИнфо.Вставить("id", Payment["id"]);
	платеж = GetPayment(платежИнфо);
	
	Если платеж["error"] <> Неопределено Тогда
		Сообщить("Ошибка №" + платеж["error"] + ". " + платеж["description"]);
		Возврат;	
	КонецЕсли;
	
	Payment = платеж;
	Если Payment["status"] = "error" Тогда
		//отгика омтены платежа
		Сообщить("Не удалось провести оплату. Попробуйте снова.");
		ОтключитьОбработчикОжидания("ПровекаПлатежа");
		Возврат;	
	КонецЕсли;
	
	Если Payment["status"] = "successful" Тогда
		//логика подтверждения оплаты и печати чека
		Сообщить("Оплата прошла успешно!");
		ОтключитьОбработчикОжидания("ПровекаПлатежа");
		Возврат;	
	КонецЕсли;
КонецПроцедуры

//призапуске плагина необходимо создать терминал
Процедура init()
	//Ищем наш терминал или создаем новый:
	терминалИнфо = Новый Структура;
	терминалИнфо.Вставить("alias", "1:1");//это уникальный id кассы. Например 1ый магазин, 1ая касса.
	Terminal = GetTerminal(терминалИнфо);
	Если Terminal["error"] <> Неопределено Тогда //проверяем, есть ли терминал
		терминалИнфо = Новый Структура;
		терминалИнфо.Вставить("alias", "1:1");
		терминалИнфо.Вставить("name", "name"); 		
		терминалИнфо.Вставить("description", "description");
		терминалИнфо.Вставить("type", "statical"); //dynamical/statical
		терминалИнфо.Вставить("defaultPrice", 0);
	    Terminal = CreateTerminal(терминалИнфо);
	КонецЕсли;
КонецПроцедуры

//процедура процесса оплаты
Процедура doPayment()
	//создаем платеж:	
	paymentInfo = Новый Структура;

	order = Новый Структура;
	order.Вставить("id", "010bade9-86b6-4dd8-aa58-fe28246f82ae");    //тут находится уникальный для вашей системы id платежа(может быть номер), строка
	order.Вставить("amount", 55); 	//сумма к оплате
	order.Вставить("description", "Заказ#55");
	paymentInfo.Вставить("order", order);

	settings = Новый Структура;
	//settings.Вставить("terminal_id", Terminal["id"]);	
	settings.Вставить("terminal_id", 10);
	settings.Вставить("payment_method", "card");
	paymentInfo.Вставить("settings", settings);

	custom_parameters = Новый Структура;
	custom_parameters.Вставить("clinet_phone", "79991234567");
	paymentInfo.Вставить("custom_parameters", custom_parameters);

	receipt = Новый Массив();
	item = Новый Структура;
	item.Вставить("name", "Борщь");
	item.Вставить("quantity", 1);
	item.Вставить("price", 55);
	item.Вставить("resultPrice", 55);
	receipt.Добавить(item);
	paymentInfo.Вставить("receipt", receipt);

	//Платеж создан, отправим запрос на сервер
	Payment = CreatePayment(paymentInfo);
		
	//Если платеж не удалось создать - выведем ошибку и вернемся	
	Если Payment["error"] <> Неопределено Тогда
		Сообщить("Ошибка №" + Payment["error"] + ". " + Payment["description"]);
		Возврат;	
	КонецЕсли;
	
	//Платеж создан успешно, теперь нужно подождать клиента, когда он оплатит.
	//ShowWaitSpinner() //запустим на форме платежа форму ожидани, при нажатии отмены вызываем doCancel()
	Сообщить(Payment["payment_url"]);
	ПодключитьОбработчикОжидания("ПровекаПлатежа", 3);	  //запускаем таймер который будет каждые 3 секунды запрашивать статус платежа с сервер.
КонецПроцедуры

//процедура отмены процесса оплаты
Процедура doCancel()
	платежИнфо = Новый Структура;
    платежИнфо.Вставить("id", Payment["id"]);
	платеж = ClosePayment(платежИнфо);
	
	ОтключитьОбработчикОжидания("ПровекаПлатежа");
КонецПроцедуры

//процедура возврата платежа
Процедура doRefund()
	//создаем возврат, указывая id платежа.
	refundInfo = Новый Структура;	
	refundInfo.Вставить("id", Payment["id"]);
	
	receipt = Новый Массив();
	item = Новый Структура;
	item.Вставить("name", "Борщь");
	item.Вставить("quantity", 1);
	item.Вставить("price", 55);
	item.Вставить("resultPrice", 55);
	receipt.Добавить(item);
	refundInfo.Вставить("receipt", receipt);
	
	refund = Новый Структура;
	refund.Вставить("amount", 55);
	refund.Вставить("reason", "В супе нашли муху. Вернули все");
	refundInfo.Вставить("refund", refund);
	
	//Отправляем запрос на сервер
	result = CreateRefund(refundInfo);
	
	Если result["error"] <> Неопределено Тогда
		Сообщить("Ошибка №" + result["error"] + ". " + result["description"]);
		Возврат;	
	КонецЕсли;
	
	Если result["status"] <> "successful" Тогда
		Сообщить("Ошибка. Неудалось совершить возврат.");
		Возврат;	
	КонецЕсли;
	
	Сообщить("Возврат успешно прошел на сумму: " + result["refund"]["amount"]);
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии1(Отказ)
    init();
	doPayment();
КонецПроцедуры

  